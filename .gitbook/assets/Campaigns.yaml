openapi: 3.0.3
info:
  title: Pareto API - Campaigns
  version: 1.18.0
  description: Campaign management endpoints for point-based incentive programs.

servers:
  - url: https://api.pareto.credit/v1

tags:
  - name: Campaigns
    description: Incentive programs and point-based reward systems

paths:
  /campaigns:
    get:
      summary: List all campaigns
      tags: [Campaigns]
      responses:
        '200':
          description: A list of campaigns
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Campaign'
                  totalCount:
                    type: integer
    post:
      summary: Create a new campaign
      tags: [Campaigns]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
      responses:
        '201':
          description: Campaign created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'

  /campaigns/{campaignId}:
    get:
      summary: Get campaign by ID
      tags: [Campaigns]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Campaign details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
    put:
      summary: Update a campaign
      tags: [Campaigns]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
      responses:
        '200':
          description: Campaign updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
    delete:
      summary: Delete a campaign
      tags: [Campaigns]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Campaign deleted

  /campaigns/{campaignId}/points:
    get:
      summary: Get campaign points by ID
      tags: [Campaigns]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema: { type: string }
        - name: walletId
          in: query
          schema: { type: string }
        - name: walletAddress
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Campaign points data

components:
  schemas:
    Campaign:
      type: object
      properties:
        _id: { type: string }
        code: { type: string }
        name:
          type: object
          additionalProperties: { type: string }
        description:
          type: object
          additionalProperties: { type: string }
        rules:
          type: array
          items:
            type: object
            properties:
              name:
                type: object
                additionalProperties: { type: string }
              description:
                type: object
                additionalProperties: { type: string }
              trigger: { type: string, enum: [DEPOSIT, DEPOSIT_REQUEST] }
              deposit:
                type: object
                properties:
                  type: { type: string, enum: [BALANCE, AGE] }
                  value: { type: number }
              reward:
                type: object
                properties:
                  type: { type: string, enum: [AMOUNT, MULTIPLIER] }
                  value: { type: number }
              frequency:
                type: object
                properties:
                  value: { type: number }
                  unit: { type: string, enum: [seconds, minutes, hours, days, months, years] }
        referrals:
          type: array
          items:
            type: object
            properties:
              code: { type: string }
              isActive: { type: boolean }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
        link: { type: string }
        galxeId: { type: number }
        createdAt: { type: string, format: date-time }
        createdBy: { type: string }
        updatedAt: { type: string, format: date-time }
        updatedBy: { type: string }